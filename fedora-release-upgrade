#!/bin/bash

# Initialize variables, change into /tmp
cd /tmp/ || exit 1
ts=$(date +%s)
OUT_FILE=/tmp/"fedora-upgrade-dnf-output-$$-$ts.log"
GUI=0
[[ -n "$DISPLAY" ]] && GUI=1
CLEAN=0
DEBUG=0
KEEP=0
HELP=0

# Check dependencies
for d in awk date grep cut head tail df tee curl wget; do
    if ! type $d &>/dev/null; then
        echo "Dependency not found: $d" >&2
        exit 1
    fi
done

################################################################################

# Options
while [[ $# -gt 0 ]]; do
    case "$1" in
        -d|--debug)
            DEBUG=1
            ;;
        --gui)
            GUI=1
            ;;
        --cli)
            GUI=0
            ;;
        --clean)
            CLEAN=1
            ;;
        -o|--output)
            OUT_FILE=$2
            shift
            ;;
        -h|--help)
            HELP=1
            ;;
        --keep)
            KEEP=1
            ;;
        --)
            break
            ;;
        *)
            echo "Error parsing arguments" >&2
            exit 1
            ;;
    esac
    shift
done

# Check for zenity dependency if in GUI mode
if [[ $GUI -eq 1 ]]; then
    if ! type zenity &>/dev/null; then
        echo "Dependency not found: $d" >&2
        exit 1
    fi
fi

################################################################################

# Help
if [[ $HELP -eq 1 ]]; then
    read -r -d '' text <<'    EOF'
    Fedora release upgrade script

    Usage:
    NAME
    NAME --output /var/tmp/fedora-upgrade.log
    NAME [--gui|--cli]
    NAME --clean
    NAME --debug

    It runs in GUI mode by default (if $DISPLAY set).
    In GUI mode, it shows a dialog asking if the next release version should be downloaded and installed. If you deny, nothing happens.
    In a terminal environment without display (or with --cli), all messages and questions are shown in your terminal.                      

    It creates a temporary script that will install the dnf upgrade plugin and run the upgrade process, which is why the first thing it does is ask for the root password. Well, unless you're using the sudo option NOPASSWD.
    Don't worry, it'll ask before starting the download and after that, it'll ask again before rebooting the system.

    Use the --clean option if a previous download was interrupted.

    Use the --output argument to specify a dnf log file. By default, the dnf output will be saved to a file in /tmp.


    EOF
    text=$(echo "$text" | sed -r 's!^\s{4}!!')
    text=$(echo "$text" | sed -r "s!\bNAME\b!$0!")

    info "$text"
    exit
fi

################################################################################

# sudo helper
function run_sudo {
    local file=$1

    if [ "$EUID" -eq 0 ]; then
        # Already running as root
        $file
    elif [ -t 0 ]; then
        # Interactive mode (terminal)
        sudo "$file"
    else
        # Show graphical password prompt
        if type gksu &>/dev/null; then
            gksu --su-mode "$file"
        elif type kdesu &>/dev/null; then
            kdesu -n -c "$file"
        elif type gksudo &>/dev/null; then
            gksudo "$file"
        elif type kdesudo &>/dev/null; then
            kdesudo -c "$file"
        else
            zenity --error --text \
                "gksu not found, cannot sudo non-interactively"
        fi
    fi
}

# info and question helper
if [[ $GUI -eq 1 ]]; then
    function create_iq_func {
        function info {
            local msg=$*
            zenity --info --text "$msg"
        }
        function err {
            local msg=$*
            zenity --error --text "$msg"
        }
        function blub {
            zenity --text-info
        }
        function ask {
            local q=$*
            zenity --question --text "$q"
        }
        function dooo {
            local out_file=$(mktemp)
            cat - | tee "$out_file" | \
            zenity --progress --pulsate --auto-close >/dev/null
            cat "$out_file"
        }
    }
else
    function create_iq_func {
        function info {
            local msg=$*
            echo "[INFO] $msg"
        }
        function err {
            local msg=$*
            echo "[ERROR] $msg"
        }
        function blub {
            cat
        }
        function ask {
            local q=$*
            read -p "$q " -n 1 -r
            echo
            if [[ $REPLY =~ ^[Yy]$ ]]; then
                return 0
            else
                return 1
            fi
        }
        function dooo {
            cat
        }
    }
fi
create_iq_func

################################################################################

# Run on Fedora only
if [ ! -f "/etc/fedora-release" ]; then
    err "This tool runs on Fedora only. You appear to be running a different distribution."
    exit 1
fi

################################################################################

# Check available disk space
avail_var=$(df -k --output="avail" /var/ | tail -n 1)
avail_var_g=$((avail_var/1024/1024))
[[ $DEBUG -eq 1 ]] && info "$avail_var_g GB available on /var"
min_space_g=5
if [[ $avail_var_g -lt $min_space_g ]]; then
    err "You only have $avail_var_g GB of available disk space on /var."
    exit 1
fi

################################################################################

# Create temporary script
file=".fedora-upgrade-script.tmp.$$.$ts.sh"
if [ -e "$file" ]; then
    err "File conflict: $file"
    exit 2
fi
read -r -d '' script <<'EOF'
#!/bin/bash
set -o pipefail # ${PIPESTATUS[0]}

# Temporary script

###FUNC###

###VARS###

LANG=en_US.UTF-8
LANG=en_CA
export LANG

# Check if OS is Fedora
if [[ ! -e /etc/fedora-release ]]; then
    text="This script is for Fedora only."
    err "$text"
    exit 1
fi

# Clean up package cache
if [[ $CLEAN -eq 1 ]]; then
    dnf system-upgrade clean
    if [[ $? -ne 0 ]]; then
        err "Failed to clean package cache"
        exit 1
    else
        info "Cleaned up package cache"
        exit
    fi
fi

# Determine old release version
CURRENT_VERSION=$(cat /etc/os-release | grep VERSION_ID | cut -f2 -d'=')
NEXT_VERSION=$((CURRENT_VERSION+1))
if [[ ! "$CURRENT_VERSION" =~ ^[0-9]+$ ]]; then
    text="Error determining release version."
    err "$text"
    exit 1
fi

# Try to determine latest stable release(s)
function get_releases {
    local mirror
    shopt -s extglob

    # Get mirror redirect
    mirror=$(curl -sI http://download.fedoraproject.org | grep ^Location)
    if [[ $? -ne 0 ]]; then
        return
    fi

    # They took the FTP site offline
    # ("nobody uses FTP nowadays, we don't even know what it is...")
    # curl -skL --list-only "ftp://$mirror/releases/"

    # HTTP listing available here:
    # https://dl.fedoraproject.org/pub/fedora/linux/releases/
    # It's just that HTTP directory listings aren't made for machines,
    # but we can use wget, which has a spider function.
    temp_dir=$(mktemp -d) || exit $?
    releases_ls_url=https://dl.fedoraproject.org/pub/fedora/linux/releases/
    (cd "$temp_dir" && wget --spider -r -l 1 --no-parent "$releases_ls_url" >/dev/null 2>&1) || exit $?
    list=$(cd "$temp_dir" && ls dl.fedoraproject.org/pub/fedora/linux/releases/) || exit $?

    echo "$list"
}
available_releases=$(get_releases)
echo -e "List of available releases:\n$available_releases" >>$OUT_FILE
if [ -z "$available_releases" ]; then
    err "Failed to load list of available releases."
else
    if ! (echo "$available_releases" | grep -qw "$NEXT_VERSION"); then
        err "This is Fedora version $CURRENT_VERSION. A newer release could not be found."
        exit 1
    fi
fi

# Ask
ask "This is Fedora version $CURRENT_VERSION. Download upgrade to $NEXT_VERSION now?"
if [[ $? -ne 0 ]]; then
    exit
fi

# Update system-upgrade plugin
[[ $DEBUG -eq 1 ]] && info "First - installing/updating system-upgrade plugin"
output=$(dnf install \
    -y --best --allowerasing dnf-plugin-system-upgrade 2>&1 | \
    tee -a $OUT_FILE | \
    dooo \
)
if [[ $? -ne 0 || ${PIPESTATUS[0]} -ne 0 ]]; then
    text="Error updating system-upgrade plugin!"
    text=$text$'\n\n'"$output"
    echo "$text" | blub
    exit 1
else
    [[ $DEBUG -eq 1 ]] && echo "$output" | blub
fi

# Download/prepare upgrade
err=0
cmd="dnf system-upgrade download -y --best --allowerasing --releasever $NEXT_VERSION"
if [[ $DEBUG -eq 1 ]]; then
    info "Starting download (this will take a long time): $cmd"
    [[ -n "$OUT_FILE" ]] && info "The dnf output will be saved to: $OUT_FILE"
    output=$($cmd | tee -a $OUT_FILE | tee /dev/tty)
else
    echo "Downloading release upgrade files. This will take a long time. Watch /var/log/dnf.log if you're curious."
    [[ -n "$OUT_FILE" ]] && echo "The dnf output will be saved to: $OUT_FILE"
    output=$($cmd 2>&1 | tee -a $OUT_FILE | dooo)
fi
if [[ $? -ne 0 || ${PIPESTATUS[0]} -ne 0 ]]; then
    err=1
    # Upgrade preparation failed
    # This could be an error like this one:
    # package foo-1.2.3-4.fc20.noarch requires bar, but none of the providers can be installed.
    # In this case, "foo" should be uninstalled.
    if [[ -z "$output" ]]; then
        output=$(cat "$OUT_FILE")
    fi

    # Extract first few interesting lines of output
    # Nobody wants to read 100 almost identical lines/errors.
    # So we cut off the rest. The full output is saved in a file.
    short_output=$output
    if [[ "$short_output" =~ ^Last\ metadata\ expiration\ check ]]; then
        short_output=$(echo "$short_output" | tail -n +2)
    fi
    lines=$(echo -n "$short_output" | grep -c '^')
    if [[ "$lines" -gt 10 ]]; then
        short_output=$(echo "$output" | head -n 1)$'\n...\n'$(echo "$output" | tail -n 10)
    fi

    # Does the error mention a problem with a specific package?
    # But I'm too afraid to remove "any" package.
    # For example, if a conflict with mate-desktop-configs is reported...
    #  Problem: cannot install the best update candidate for package mate-desktop-configs-1.26.0-4.fc35.noarch
    # Uninstalling this package will also uninstall mate-desktop!
    problem_line=$(echo "$output" | grep '^\s*Problem:')
    if ! [[ -z "$problem_line" ]]; then
        package_name=$(echo "$problem_line" | grep package | sed 's/.*package //')
        if ! [[ -z "$package_name" ]]; then
            text="Error preparing system upgrade!"
            text=$text$'\n'"$problem_line"
            text=$text$'\n\n'"Please check this package => $package_name"
            text=$text$'\n\n'"Try to skip uninstallable packages?"
            ask "$text"
            #if [[ $? -eq 0 ]]; then
            #    if [[ $DEBUG -eq 1 ]]; then
            #        output=$(dnf erase -y "$package_name" 2>&1 | tee -a $OUT_FILE | tee /dev/tty)
            #    else
            #        output=$(dnf erase -y "$package_name" 2>&1 | tee -a $OUT_FILE | dooo)
            #    fi
            #    echo "Done. Now try again (restart this script)." | blub
            #    echo "$output"
            #    exit
            #fi
            if [[ $? -eq 0 ]]; then
                if [[ $DEBUG -eq 1 ]]; then
                    output=$($cmd --skip-broken 2>&1 | tee -a $OUT_FILE | tee /dev/tty)
                else
                    output=$($cmd --skip-broken 2>&1 | tee -a $OUT_FILE | dooo)
                fi
                if [[ $? -eq 0 ]]; then
                    err=0
                else
                    echo "Done. But this didn't work either." | blub
                    echo "$output"
                    exit 1
                fi
            fi
        else
            echo "$problem_line" | blub
        fi
    fi

    # File for full output
    ts=$(date +%s)
    file="/tmp/FEDORA_UPGRADE_OUTPUT.$$.$ts.txt"
    echo "$output" >"$file"

    if [[ $err -ne 0 ]]; then

        # Show error
        text="Error preparing system upgrade!"
        text=$text$'\n\n'"$short_output"
        text=$text$'\n\n'"You'll find the full command output in this file: $file"
        echo "$text" | blub

        # Save full output
        echo "$output" >"$file"
        if [[ $? -ne 0 ]]; then
            err "Error saving output to file! See next message..."
            echo "$output" | blub
        fi

        exit 1

    fi
fi

# Ask
ask "Upgrade to version $NEXT_VERSION downloaded successfully. Reboot and install upgrade now?"
if [[ $? -ne 0 ]]; then
    exit
fi

# Start upgrade
output=$(dnf system-upgrade reboot 2>&1 | tee -a $OUT_FILE)
if [[ $? -ne 0 || ${PIPESTATUS[0]} -ne 0 ]]; then
    text="Error starting system upgrade!"
    text=$"$text"$'\n'"$output"
    err "$text"
    echo -e "From dnf.log:\n$(tail -n 20 /var/log/dnf.log)" | blub
    exit 1
fi



EOF

# Complete script template with functions and variables
func_str=$(typeset -f create_iq_func)
func_str+=$'\n'"create_iq_func"
script=$(echo "$script" | awk -v r="$func_str" '{gsub(/^###FUNC###$/,r)}1')
if [[ $? -ne 0 ]]; then
    err "Error creating temporary script (failed to copy function)"
    exit 1
fi
vars_str="GUI=$GUI DEBUG=$DEBUG CLEAN=$CLEAN OUT_FILE=$OUT_FILE"
script=$(echo "$script" | awk -v r="$vars_str" '{gsub(/^###VARS###$/,r)}1')
if [[ $? -ne 0 ]]; then
    err "Error creating temporary script (failed to copy variables)"
    exit 1
fi

# Create temporary script file
echo "$script" >"$file"
if [[ $? -ne 0 ]]; then
    err "Error creating temporary script file in /tmp:"$'\n'"$file"
    exit 1
fi
chmod +x "$file"

# Show log file path
echo "Run tail -f $OUT_FILE in another terminal to see what's happening..."

# Run with sudo (gui support, not in terminal)
echo "Now requesting sudo to run upgrade script: /tmp/$file"
echo "Don't worry, it'll ask before downloading the upgrade."
echo "(If you don't trust me, read the script file.)"
run_sudo "./$file"

# Clean up
[[ $KEEP -eq 0 ]] && rm "$file"



