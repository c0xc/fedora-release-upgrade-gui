#!/usr/bin/env bash

# Check dependencies
for d in zenity date grep head tail df; do
    if ! type $d >/dev/null 2>&1; then
        echo "Dependency not found: $d" >&2
        exit 1
    fi
done

# Run on Fedora only
if [ ! -f "/etc/fedora-release" ]; then
    zenity --error --text \
        "This tool runs on Fedora only. You appear to be running a different distribution."
    exit 1
fi

# Check available disk space
avail_var=$(df -k --output="avail" /var/ | tail -n 1)
avail_var_g=$((avail_var/1024/1024))
min_space_g=5
if [[ $avail_var_g -lt $min_space_g ]]; then
    zenity --error --text \
        "You only have $avail_var_g GB of available disk space on /var."
    exit 1
fi

# sudo helper
function run_sudo
{
    local file=$1

    if [ "$EUID" -eq 0 ]; then
        # Already running as root
        $file
    elif [ -t 0 ]; then
        # Interactive mode (terminal)
        sudo "$file"
    else
        # Show graphical password prompt
        if type gksu &>/dev/null; then
            gksu --su-mode "$file"
        elif type kdesu &>/dev/null; then
            kdesu -n -c "$file"
        elif type gksudo &>/dev/null; then
            gksudo "$file"
        elif type kdesudo &>/dev/null; then
            kdesudo -c "$file"
        else
            zenity --error --text \
                "gksu not found, cannot sudo non-interactively"
        fi
    fi
}

# Create script in /tmp
cd /tmp/ || exit 1
ts=$(date +%s)
file=".fedora-upgrade-script.tmp.$$.$ts.sh"
if [ -e "$file" ]; then
    # File conflict
    exit 1
fi
cat <<'EOF' >"$file"
#!/usr/bin/env bash

# Temporary script

# Check if OS is Fedora
if [[ ! -e /etc/fedora-release ]]; then
    text="This script is for Fedora only."
    zenity --error --text "$text"
    exit 1
fi

# Determine old release version
CURRENT_VERSION=$(cat /etc/os-release | grep VERSION_ID | cut -f2 -d'=')
NEXT_VERSION=$((CURRENT_VERSION+1))
if [[ ! "$CURRENT_VERSION" =~ ^[0-9]+$ ]]; then
    text="Error determining release version."
    zenity --error --text "$text"
    exit 1
fi

# Try to determine latest stable release(s)
function get_releases {
    local mirror
    shopt -s extglob

    # Get mirror redirect
    mirror=$(curl -sI http://download.fedoraproject.org | grep ^Location)
    if [[ $? -ne 0 ]]; then
        return
    fi

    # Cut "Location: " and trim
    mirror=${mirror#*: }
    mirror="${mirror#"${mirror%%[![:space:]]*}"}"
    mirror="${mirror%"${mirror##*[![:space:]]}"}"
    if [ -z "$mirror" ]; then
        return
    fi

    # Cut "http://" prefix and slash
    mirror=${mirror#*://}
    mirror=${mirror%%+(/)}

    curl -skL --list-only "ftp://$mirror/releases/"
}
for i in {1..5}; do
    available_releases=$(get_releases)
    [ -n "$available_releases" ] && break
done
if [ -z "$available_releases" ]; then
    zenity --warning --text "Failed to load list of available releases."
else
    if ! (echo "$available_releases" | grep -q "$NEXT_VERSION"); then
        zenity --error --text "This is Fedora version $CURRENT_VERSION. A newer release could not be found."
        exit 1
    fi
fi

# Ask
zenity --question --text "This is Fedora version $CURRENT_VERSION. Download upgrade to $NEXT_VERSION now?"
if [[ $? -ne 0 ]]; then
    exit
fi

# Update system-upgrade plugin
output=$(dnf install \
-y --best --allowerasing dnf-plugin-system-upgrade 2>&1 | \
zenity --progress --pulsate --auto-close \
)
if [[ $? -ne 0 ]]; then
    text="Error updating system-upgrade plugin!"
    text=$text$'\n\n'"$output"
    echo "$text" | zenity --text-info --window-icon error
    exit 1
fi

# Download/prepare upgrade
output=$(dnf system-upgrade \
download -y --best --allowerasing --releasever "$NEXT_VERSION" 2>&1 | \
zenity --progress --pulsate --auto-close \
)
if [[ $? -ne 0 ]]; then
    # Upgrade preparation failed
    # This could be an error like this one:
    # package foo-1.2.3-4.fc20.noarch requires bar, but none of the providers can be installed.
    # In this case, "foo" should be uninstalled.

    # Extract first few interesting lines of output
    # Nobody wants to read 100 almost identical lines/errors.
    # So we cut off the rest. The full output is saved in a file.
    short_output=$output
    if [[ "$short_output" =~ ^Last\ metadata\ expiration\ check ]]; then
        short_output=$(echo "$short_output" | tail -n +2)
    fi
    lines=$(echo -n "$short_output" | grep -c '^')
    if [[ "$lines" -gt 5 ]]; then
        short_output=$(echo "$short_output" | head -n 5)
        short_output=$short_output$'\n...'
    fi

    # File for full output
    ts=$(date +%s)
    file="/tmp/FEDORA_UPGRADE_OUTPUT.$$.$ts.txt"

    # Show error
    text="Error preparing system upgrade!"
    text=$text$'\n\n'"$short_output"
    text=$text$'\n\n'"You'll find the full command output in this file: $file"
    echo "$text" | zenity --text-info --window-icon error

    # Save full output
    echo "$output" >"$file"
    if [[ $? -ne 0 ]]; then
        zenity --error --text "Error saving output to file! See next dialog."
        echo "$output" | zenity --text-info --window-icon error
    fi

    exit 1
fi

# Ask
zenity --question --text "Upgrade to version $NEXT_VERSION downloaded successfully. Reboot and install upgrade now?"
if [[ $? -ne 0 ]]; then
    exit
fi

# Start upgrade
output=$(dnf system-upgrade reboot 2>&1)
if [[ $? -ne 0 ]]; then
    text="Error starting system upgrade!"
    text=$"$text"'\n'"$output"
    zenity --error --text "$text"
    exit 1
fi



EOF
if [[ $? -ne 0 ]]; then
    zenity --error --text \
        "Error creating temporary script file in /tmp:"$'\n'"$file"
    exit 1
fi
chmod +x "$file"

# Run with sudo (gui support, not in terminal)
run_sudo "./$file"

# Clean up
rm "$file"



